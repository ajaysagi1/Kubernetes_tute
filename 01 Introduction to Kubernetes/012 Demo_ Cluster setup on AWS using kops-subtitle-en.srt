1
00:00:00,420 --> 00:00:07,350
At this point, you should have set up your Vagrant Box, you should have set up your AWS.

2
00:00:07,420 --> 00:00:16,450
So, now we can launch our Kubernetes cluster using kops here and logged in to my "ubuntu-xenial" box.

3
00:00:17,680 --> 00:00:25,350
Before setting up the cluster, you need to make sure that you have kubectl installed as well.

4
00:00:25,400 --> 00:00:30,430
This URL you can find in the procedure document, you can just download it.

5
00:00:32,710 --> 00:00:44,170
You move it to use a local bin, exactly where kops is as well, and you give it execution permissions.

6
00:00:45,700 --> 00:00:50,080
And then, when you type "kubectl", you have "kubectl"  available.

7
00:00:52,480 --> 00:00:54,030
Before creating the cluster, you will also have to create new ssh keys, and those ssh keys will be used to log in to the cluster.

8
00:01:03,810 --> 00:01:06,530
"ssh-keygen" can create new keys,

9
00:01:06,540 --> 00:01:11,370
so what I'm going to do is, I'm going to create a new key, in ".ssh/id_rsa".

10
00:01:14,190 --> 00:01:22,680
And this public key id "id_rsa.pub" will be uploaded to our instances,

11
00:01:22,680 --> 00:01:25,080
and that way we will be able to log into our instances using our private key.

12
00:01:25,080 --> 00:01:27,330
So, "id_rsa" is our private key.

13
00:01:27,330 --> 00:01:36,040
These are public keys, public key goes in the instance, and we log in with the private key.

14
00:01:36,040 --> 00:01:39,220
And, just one thing I want to do, before I'm going to do another kops command.

15
00:01:41,980 --> 00:01:49,770
I'm just going to rename it to just kops, rather than having "kips-linux-amd64".

16
00:01:51,910 --> 00:01:53,350
This is the kops command that I am going to execute.

17
00:01:53,350 --> 00:02:00,400
And this kops command is not going to do anything yet, because it needs a lot of stuff,

18
00:02:02,590 --> 00:02:10,660
before it's really going to execute the commands on AWS,

19
00:02:10,660 --> 00:02:12,090
but this one is going to create one master at "t2.micro" and two nodes, also "t2.micro"

20
00:02:12,520 --> 00:02:14,400
So, we have "kops create cluster".

21
00:02:14,500 --> 00:02:15,570
Give it a name.

22
00:02:15,580 --> 00:02:18,430
This needs to be the full DNS name of the cluster.

23
00:02:18,430 --> 00:02:20,830
I have "kubernetes.newtech.academy", the one that I set up in Route 53.

24
00:02:20,830 --> 00:02:28,570
I'm going to save the state in "s3", this is my "s3" bucket.

25
00:02:29,520 --> 00:02:35,640
And I'm going to launch it in the "eu-west-1a" zone,  you're probably going to use another zone, "us-east-1a","us-west-1a", and so on.

26
00:02:35,640 --> 00:02:45,600
node-count=2, and the node-size=t2.micro, and master-size=t2.micro, and the dns-zone=kubernetes.newtech.academy.

27
00:02:45,660 --> 00:02:51,090
I am going to execute this.

28
00:02:51,660 --> 00:02:57,640
And then you will be able to preview the changes that will be made to AWS.

29
00:02:57,670 --> 00:03:03,870
So, it's going to make autoscaling groups for our nodes it's going to launch a master.

30
00:03:04,000 --> 00:03:07,180
It's going to provision also ssd drives.

31
00:03:07,270 --> 00:03:13,090
And then if you want to really launch this cluster, then we can just do this with "kops update cluster", and then the name with, "--yes".

32
00:03:15,370 --> 00:03:18,150
And then it's going to launch, if you want to make changes first,

33
00:03:18,160 --> 00:03:25,750
you can edit the cluster using, "kops edit cluster", and then the name, but because the state is on "s3"

34
00:03:25,750 --> 00:03:31,750
you also have to specify the state. So then, the command will work and then you can still make some changes.

35
00:03:33,630 --> 00:03:35,660
I am not going to make any changes at this point.

36
00:03:35,710 --> 00:03:39,070
I'm just going to launch the cluster.

37
00:03:39,070 --> 00:03:42,920
So, I am going to "kops update cluster", I am going to specify "--Yes".

38
00:03:43,030 --> 00:03:46,330
And again I'll specify the "--state".

39
00:03:46,810 --> 00:03:48,360
This will then launch your cluster.

40
00:03:48,430 --> 00:03:52,640
It will take a couple of minutes and then I can try to run one of the examples.

41
00:03:53,070 --> 00:03:57,370
So, now the cluster has been created and let's have a look what this means.

42
00:03:57,420 --> 00:04:10,120
"/home [...]/config" for "kubernetes.newtech.academy" in this file. I am just going to "cat" this file--

43
00:04:10,120 --> 00:04:17,950
And this is actually the certificate that we need and password to log in to our new cluster.

44
00:04:18,010 --> 00:04:21,040
That's what kops configured already for us.

45
00:04:21,400 --> 00:04:25,490
So, for instance, we have here to server "https://api.kubernetes.newtech.academy",

46
00:04:27,730 --> 00:04:30,990
and that's what we will be able to use.

47
00:04:31,270 --> 00:04:33,150
Let's see if the nodes are up.

48
00:04:33,310 --> 00:04:39,770
So, "kubectl node", three nodes here with "ready" status.

49
00:04:39,810 --> 00:04:48,930
One master is going to be to master, because it is on a  different IP range, and then two nodes.

50
00:04:48,930 --> 00:04:55,910
Let's try to run something on this cluster. Let's try to run the same program the "hello-minikube", so that we can see if that also works.

51
00:05:00,400 --> 00:05:07,640
So first we do, "kubectl run hello-minikube" with a image, and we specify a port, then it says, "deployment 'hello-minikube' created"

52
00:05:08,630 --> 00:05:15,140
Typically on AWS when you want to access this service, we're going to put a load balancer in front like an ELB,

53
00:05:16,600 --> 00:05:19,750
elastic load balancer, the server that AWS provides.

54
00:05:19,870 --> 00:05:23,980
I'm going to explain this to you in the next lectures.

55
00:05:23,980 --> 00:05:29,480
So, what I'm going to do now is, I'm going to do expose deployment just like we did with minikube.

56
00:05:29,770 --> 00:05:38,020
And then, I would have to open a port. What port you able to see usin, "kubectl get service"?.

57
00:05:38,020 --> 00:05:45,990
So, once this image is up, it gets assigned a port. "hello-minikube" is running, and this port is now exposed.

58
00:05:46,030 --> 00:05:51,810
So, if we want to access it directly without a load balancer, we have to open this port in the firewall.

59
00:05:52,600 --> 00:05:54,940
In the PC management console,

60
00:05:54,940 --> 00:06:04,660
so if you go from "homescreen" to "VPC", and then you go to "Security Groups", then you see the "masters.kubernetes",

61
00:06:04,900 --> 00:06:05,800
and this is the one we are going to edit.

62
00:06:06,040 --> 00:06:17,880
and we are going to add another rule, this was the port, I am going to open this for everyone.

63
00:06:19,240 --> 00:06:22,630
Let's see if this--

64
00:06:22,730 --> 00:06:29,010
So, if you have a look at "ec2" services, these are instances that are running now.

65
00:06:29,100 --> 00:06:35,950
If you take a look at route 53, then you see you have "api.kubernetes.newtech.academy", so we can use this to connect with our master node,

66
00:06:36,210 --> 00:06:43,010
This is the only public IP that we can use now.

67
00:06:43,260 --> 00:06:52,500
So, I'm going to try and connect to this hostname, on this port, and then you see, we get the end point of this application.

68
00:06:53,960 --> 00:06:55,430
So, the application is running.

69
00:06:55,440 --> 00:06:57,060
The port is now exposed.

70
00:06:57,330 --> 00:06:58,710
Everything is working.

71
00:06:58,710 --> 00:07:05,190
This was just a test, in the next coming lectures you will see, how to put this on a normal port,

72
00:07:05,250 --> 00:07:07,010
on a normal HTTP port, for instance, using a load balancer.

73
00:07:07,170 --> 00:07:10,120
But, for now, this is enough to test our cluster.

74
00:07:10,230 --> 00:07:14,670
We can keep this cluster running or if you want to make sure that you're not paying for these instances

75
00:07:15,150 --> 00:07:21,850
and these volumes here, you have some volumes here, you have some instances here.

76
00:07:21,940 --> 00:07:23,230
If you will make sure you're not paying for them.

77
00:07:23,230 --> 00:07:29,960
Then you can shut down your cluster again, and you can do it again using kops.

78
00:07:29,980 --> 00:07:32,320
You can use kops, "kops delete cluster --name", DNS name.

79
00:07:38,620 --> 00:07:46,390
It's going to then propose the resources it wants to delete and the these are all the resources.

80
00:07:46,510 --> 00:07:47,690
If you agree with that.

81
00:07:47,890 --> 00:07:49,660
You can specify "--yes".

82
00:07:51,940 --> 00:07:56,400
And then it's going to delete all the resources, it's going to delete your cluster, VPC, everything that it's set up for you.

83
00:08:00,400 --> 00:08:01,950
It's going to delete again.

84
00:08:02,740 --> 00:08:03,760
So that was it.

85
00:08:04,210 --> 00:08:10,390
If you had any issues during this process just use the Q&A, copy paste the error that you're getting, and I'm ready to help you.

86
00:08:11,850 --> 00:08:15,650
Otherwise, if everything is working you, you can continue with the next lecture.

